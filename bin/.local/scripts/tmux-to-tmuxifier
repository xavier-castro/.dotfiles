#!/usr/bin/env bash

# tmux-to-tmuxifier - Generate tmuxifier layout files from current tmux session
# Usage: tmux-to-tmuxifier [session_name] [layout_name]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

error() {
    echo -e "${RED}Error: $1${NC}" >&2
    exit 1
}

info() {
    echo -e "${GREEN}$1${NC}"
}

warn() {
    echo -e "${YELLOW}$1${NC}"
}

# Check if we're in a tmux session
if [[ -z "$TMUX" ]]; then
    error "This script must be run from within a tmux session"
fi

# Get current session name if not provided
current_session=$(tmux display-message -p '#S')
session_name="${1:-$current_session}"

# Get layout name from user
if [[ -z "$2" ]]; then
    echo -n "Enter layout name: "
    read -r layout_name
    if [[ -z "$layout_name" ]]; then
        error "Layout name cannot be empty"
    fi
else
    layout_name="$2"
fi

# Check if tmuxifier is available
if ! command -v tmuxifier &> /dev/null; then
    error "tmuxifier is not installed or not in PATH"
fi

# Get tmuxifier layout path
layout_path="${TMUXIFIER_LAYOUT_PATH:-$HOME/.tmuxifier/layouts}"
session_file="${layout_path}/${layout_name}.session.sh"

# Check if layout already exists
if [[ -f "$session_file" ]]; then
    echo -n "Layout '$layout_name' already exists. Overwrite? (y/N): "
    read -r confirm
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        info "Aborted."
        exit 0
    fi
fi

# Create layout directory if it doesn't exist
mkdir -p "$layout_path"

info "Capturing session '$session_name' as tmuxifier layout '$layout_name'..."

# Get session working directory
session_path=$(tmux display-message -t "$session_name" -p '#{session_path}')

# Start building the session file
cat > "$session_file" << 'EOF'
# Generated by tmux-to-tmuxifier script
# Edit as needed for your workflow

EOF

# Add session root if different from HOME
if [[ "$session_path" != "$HOME" ]]; then
    echo "session_root \"$session_path\"" >> "$session_file"
    echo "" >> "$session_file"
fi

# Add session initialization
echo "if initialize_session \"$layout_name\"; then" >> "$session_file"
echo "" >> "$session_file"

# Get all windows in the session
windows=$(tmux list-windows -t "$session_name" -F "#{window_index}:#{window_name}:#{window_active}")

active_window=""

while IFS=':' read -r win_index win_name win_active; do
    info "Processing window $win_index: $win_name"

    # Track active window
    if [[ "$win_active" == "1" ]]; then
        active_window="$win_index"
    fi

    # Get panes for this window with layout info
    panes=$(tmux list-panes -t "$session_name:$win_index" -F "#{pane_index}:#{pane_current_path}:#{pane_current_command}:#{pane_active}:#{pane_width}:#{pane_height}")
    pane_count=$(echo "$panes" | wc -l)

    echo "  # Window $win_index: $win_name ($pane_count panes)" >> "$session_file"
    echo "  new_window \"$win_name\"" >> "$session_file"

    # Handle panes
    if [[ $pane_count -gt 1 ]]; then
        # Process each pane
        pane_index=0
        active_pane=""
        declare -a pane_paths
        declare -a pane_cmds

        while IFS=':' read -r pane_idx pane_path pane_cmd pane_active pane_width pane_height; do
            if [[ "$pane_active" == "1" ]]; then
                active_pane="$pane_idx"
            fi

            pane_paths[$pane_index]="$pane_path"
            pane_cmds[$pane_index]="$pane_cmd"

            if [[ $pane_index -gt 0 ]]; then
                # Calculate split percentage based on dimensions
                # Get total window size for percentage calculation
                total_width=$(tmux display-message -t "$session_name:$win_index" -p '#{window_width}')
                total_height=$(tmux display-message -t "$session_name:$win_index" -p '#{window_height}')

                # Determine if this is more likely a vertical or horizontal split
                # by comparing aspect ratios
                if [[ $pane_width -lt $((total_width / 2)) ]] && [[ $pane_height -gt $((total_height / 2)) ]]; then
                    # Vertical split (side by side)
                    percentage=$((pane_width * 100 / total_width))
                    echo "  split_v $percentage" >> "$session_file"
                else
                    # Horizontal split (top/bottom)
                    percentage=$((pane_height * 100 / total_height))
                    echo "  split_h $percentage" >> "$session_file"
                fi
            fi

            # Set working directory if different from session root
            if [[ "$pane_path" != "$session_path" && "$pane_path" != "$HOME" ]]; then
                echo "  run_cmd \"cd '$pane_path'\"" >> "$session_file"
            fi

            # Add command if it's not just a shell
            if [[ "$pane_cmd" != "fish" && "$pane_cmd" != "bash" && "$pane_cmd" != "zsh" && "$pane_cmd" != "sh" ]]; then
                echo "  run_cmd \"$pane_cmd\"" >> "$session_file"
            fi

            ((pane_index++))
        done <<< "$panes"

        # Select active pane if not the first one
        if [[ -n "$active_pane" && "$active_pane" != "0" ]]; then
            echo "  select_pane $active_pane" >> "$session_file"
        fi

        # Clean up arrays
        unset pane_paths pane_cmds
    else
        # Single pane window
        while IFS=':' read -r pane_idx pane_path pane_cmd pane_active pane_width pane_height; do
            # Set working directory if different from session root
            if [[ "$pane_path" != "$session_path" && "$pane_path" != "$HOME" ]]; then
                echo "  run_cmd \"cd '$pane_path'\"" >> "$session_file"
            fi

            # Add command if it's not just a shell
            if [[ "$pane_cmd" != "fish" && "$pane_cmd" != "bash" && "$pane_cmd" != "zsh" && "$pane_cmd" != "sh" ]]; then
                echo "  run_cmd \"$pane_cmd\"" >> "$session_file"
            fi
        done <<< "$panes"
    fi

    echo "" >> "$session_file"

done <<< "$windows"

# Select the active window
if [[ -n "$active_window" ]]; then
    echo "  # Select the default active window" >> "$session_file"
    echo "  select_window $active_window" >> "$session_file"
    echo "" >> "$session_file"
fi

# Close the session initialization
echo "fi" >> "$session_file"
echo "" >> "$session_file"
echo "# Finalize session creation and switch/attach to it" >> "$session_file"
echo "finalize_and_go_to_session" >> "$session_file"

info "Successfully created tmuxifier layout: $session_file"
info "You can now load this layout with: tmuxifier load-session $layout_name"
warn "Note: You may need to edit the layout file to fine-tune pane splits and commands"

# Make the file executable
chmod +x "$session_file"

# Ask if user wants to edit the file
echo -n "Would you like to edit the layout file now? (y/N): "
read -r edit_confirm
if [[ "$edit_confirm" =~ ^[Yy]$ ]]; then
    ${EDITOR:-nano} "$session_file"
fi
